/* Anonymous block pointers (in-progress) */

typedef double (^D)(int);
D d = ^ double (int m) {
    return (double)m;
};

typedef int (^M)(double);
M m = ^ int (double d) {
    return (int)d;
};

typedef void * BlkPtr;
BlkPtr blk_d_ptr = &d;
BlkPtr blk_m_ptr = &m;

/* */

/* reduction function */

static void (^(^(^reduce)(UIButton * _Nonnull __strong *))(UIButton *(^__strong)(UIButton *__strong, unsigned int)))(UIButton *(^__strong)(UIButton * _Nonnull __strong, unsigned int)) =
^ (__strong UIButton * _Nonnull button_collection[5]) {
    dispatch_queue_t enumerator_queue  = dispatch_queue_create("enumerator_queue", DISPATCH_QUEUE_SERIAL);
    return ^ (void *(^reduction)(UIButton *, unsigned int)) {
        return ^ (UIButton * (^reductor)(UIButton * _Nonnull, unsigned int)) {
            dispatch_barrier_async(dispatch_get_main_queue(), ^{
                dispatch_apply(5, enumerator_queue, ^(size_t index) {
                    dispatch_barrier_async(dispatch_get_main_queue(), ^{
                        reduction(reductor(button_collection[index], (unsigned int)index), (unsigned int)index);
                    });
                });
            });
        };
    };
};

= ^ (__strong UIButton * _Nonnull button_collection[5]) {
    return ^ (void(^b)(UIButton * _Nonnull)) {
        return ^ (UIButton *(^c)(unsigned int)) {
        };
    };
};

static void (^reduce)(void) = ^{
    state();
    filter(buttons)(^ (UIButton * _Nonnull button, unsigned int property) {
        printf("\n%lu\tstate\t%s\t\t", button.tag, (state_bits & (1 << property)) ? "TRUE" : "FALSE");
        printf("%lu\tselected\t%s\t\t", button.tag, (selected_bits & (1 << property)) ? "TRUE" : "FALSE");
        printf("%lu\tenabled\t%s\n", button.tag, (enabled_bits & (1 << property)) ? "TRUE" : "FALSE");
        [button setSelected:(selected_bits & (1 << property)) ? TRUE : FALSE];
        [button setHidden:(enabled_bits & (1 << property)) ? FALSE : TRUE];
    });
};

/* */

/* Is nth bit masked */

bool nth_is_set = (v & (1 << n)) != 0;
bool nth_is_set = (v >> n) & 1;

/* */

/* Core Haptics failure */

@property (nonatomic, assign) BOOL supportsHaptics;
@property (nonatomic, strong) CHHapticEngine* engine;
@property (nonatomic, strong) id<CHHapticPatternPlayer> player;

    self.supportsHaptics = CHHapticEngine.capabilitiesForHardware.supportsHaptics;
    printf("CHHapticEngine %s\n", (self.supportsHaptics) ? "supported" : "not supported");
    __autoreleasing NSError* error = nil;
    _engine = [[CHHapticEngine alloc] initAndReturnError:&error];
    printf("%s\n", (error) ? [error.localizedDescription UTF8String] : "Initialized CHHapticEngine");
    hapticDict =
        @{
         CHHapticPatternKeyPattern:
               @[ // Start of array
                 @{  // Start of first dictionary entry in the array
                     CHHapticPatternKeyEvent: @{ // Start of first item
                             CHHapticPatternKeyEventType:CHHapticEventTypeHapticTransient,
                             CHHapticPatternKeyTime:@0.5,
                             CHHapticPatternKeyEventDuration:@1.0
                             },  // End of first item
                   }, // End of first dictionary entry in the array
                ], // End of array
         }; // End of haptic dictionary

    CHHapticPattern* pattern = [[CHHapticPattern alloc] initWithDictionary:hapticDict error:&error];
    _player = [_engine createPlayerWithPattern:pattern error:&error];
    __weak ControlView * w_control_view = self;
    [_engine setResetHandler:^{
        NSLog(@"Engine RESET!");
        // Try restarting the engine again.
        __autoreleasing NSError* error = nil;
        [w_control_view.engine startAndReturnError:&error];
        if (error) {
            NSLog(@"ERROR: Engine couldn't restart!");
        }
        _player = [_engine createPlayerWithPattern:pattern error:&error];
    }];
    [_engine setStoppedHandler:^(CHHapticEngineStoppedReason reason){
        NSLog(@"Engine STOPPED!");
        switch (reason)
        {
            case CHHapticEngineStoppedReasonAudioSessionInterrupt: {
                NSLog(@"REASON: Audio Session Interrupt");
                // A phone call or notification could have come in, so take note to restart the haptic engine after the call ends. Wait for user-initiated playback.
                break;
            }
            case CHHapticEngineStoppedReasonApplicationSuspended: {
                NSLog(@"REASON: Application Suspended");
                // The user could have backgrounded your app, so take note to restart the haptic engine when the app reenters the foreground. Wait for user-initiated playback.
                break;
            }
            case CHHapticEngineStoppedReasonIdleTimeout: {
                NSLog(@"REASON: Idle Timeout");
                // The system stopped an idle haptic engine to conserve power, so restart it before your app must play the next haptic pattern.
                break;
            }
            case CHHapticEngineStoppedReasonNotifyWhenFinished: {
                printf("CHHapticEngineStoppedReasonNotifyWhenFinished\n");
                break;
            }
            case CHHapticEngineStoppedReasonEngineDestroyed: {
                printf("CHHapticEngineStoppedReasonEngineDestroyed\n");
                break;
            }
            case CHHapticEngineStoppedReasonGameControllerDisconnect: {
                printf("CHHapticEngineStoppedReasonGameControllerDisconnect\n");
                break;
            }
            case CHHapticEngineStoppedReasonSystemError: {
                NSLog(@"REASON: System Error");
                // The system faulted, so either continue without haptics or terminate the app.
                break;
            }
        }
    }];

    [_engine startWithCompletionHandler:^(NSError* returnedError) {
        if (returnedError)
            NSLog(@"--- Error starting haptic engine: %@", returnedError.debugDescription);
    }];

    [_player startAtTime:CHHapticTimeImmediate error:&error];

    [_engine stopWithCompletionHandler:^(NSError* _Nullable error) {
        if (error)
            NSLog(@"--- Error stopping haptic engine: %@", error.debugDescription);
    }];
